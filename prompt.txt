Update the source code such that inodeseg0 contains a two parts of data. First part is a bitmap of 255 length keeping information about which inode is full or empty. If all the inodes are full, create a new file inodeseg1 and continue the same thing. For inodeseg0 the first bitmap should be stored with first 0 to 4096 bytes and then another 255 of inodes that are each 4096 bytes.

Inode struct looks like this
typedef struct
{
    uint32_t type;                             // File type (regular or directory)
    uint64_t size;                             // File size in bytes
    uint32_t direct_blocks[MAX_DIRECT_BLOCKS]; // Direct block pointers
    uint32_t single_indirect;                  // Single indirect block
    uint32_t double_indirect;                  // Double indirect block
} inode_t;

Then there is another file that needs to be created dataseg0, similar to inode the first 4069 bytes of the data segment file is also used to store a bitmap of 255 length that keeps track of the information of the remaining 255 data block are filled or not. 

typedef struct {
    char data[4096];
} datablock_t;

The following is the structure of the two files inodes and datasegments. Both should create new file if the current files are full and keep on adding if necessary.

Storing a file in this file system.

The first inode of the inodeseg0, is allocated for root directory. This inode point to a datablock where a list of its files and subdirectory are listed. If its a file, then the data segment will have location of the inode refering to that file. If its a directoty, then the data segment will have location of the directory entry inode (which will point to another data block having locations).
Here the inode are of two types, one is of file types that has location of where the data of the file is and another is of directory types which points to the datablock thath contains the list of files and respective inodes.

Possible needed structs that may be used or unused based on the program.

struct dirblock {
    struct dirent dirents[10];
}

struct dataseg {
    int FBL[<calculate this>];
    struct datablock [200];
}

struct dirent {
    char name[255];
    int nodenum;
    int type;
    int inuse;
}

It is not necessary to handle error while reading and writing to a file. Only handle error if its absolutely necessary.

=========================================================

Here the main.txt is a c program. In this C Program update the add_files function so that it takes in consideration of the fs_path and create folders and files based on the provided path.

If the fs_path is /dir1/dir2/sample.txt

Then the root inode at inode_index 0 will have direct_blocks mapping to a directory_block. 

Now inode for dir1 is created and then a new directory entry for it under the root_directory block is created storing name as dir1 and the inode_number for recently created inode of dir1.

Similarly, do the same for dir2 and save its inode_number in dir1 directory block that is accessed in inode direct_blocks[0].

Now create a inode of type file and point it to the file created and then save the inode number and file name in the directory block of dir2.

So now the chain would look something like this root inode -> root directory block -> dir1 inode -> dir1 directory block -> dir2 inode -> dir2 directory block -> sample.txt inode -> sample.txt directory block.

For accessing each directory block, the inode of each has direct_blocks array where the first element of that direct_blocks array has index in the directory/datablock segment.

=========================================================

Update the list_directory function such that it lists inode starting from 0. If it is a folder then read its first direct block that points to a directory block and list all the directory entires of the directory block. If the directory entires points to more directory read the inode of that directory and recursively list all files and folders in a tree like structure organized.

=========================================================

Update the extract_file function such that its parses the path provided and then returns the data of it. The last path segment is the file name and before that is all folder name. So, starting at root inode, find its directory block and then look for first directory in that directory block, if not found exit with not found, if found read the inode number and the inode block and then its directory block. Look for second segment in the direcory block. Similary get to the file inode and read all the content of the file and print it.

=========================================================
For the files that are too large, split the files into chunks and save it into a data blocks and create an array of all the created data block indexes and create directory entry for each data block and save it into a directory block with file type set to DATA_L1 and create a inode that points to the directory block.

While reading the order should be read inode for a file -> read its singly indirect address -> map through all the directory entries inodes and and get datablock for all the directory entries inodes. Combining all the result will get you the entire content of the file. Use existing function in context as well.
